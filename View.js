const readlineSync = require('readline-sync');
const fs = require('fs');
const { EOL } = require('os');
const Model = require('./model');

class View {
  constructor(model) {
    this.model = model;
  }

  run() {
    const fingerDown = 'üëé';
    const fingerUp = 'üëç';
    let count = 0;
    for (let i = 0; i < this.model.readAsk().length; i++) {
      const ask = this.model.readAsk()[i];
      let answer = this.model.readAnswers()[i + 1];
      let userName = readlineSync.question(`${EOL}${ask}${EOL}–û—Ç–≤–µ—Ç: `);
      if (typeof userName === 'string') {
        userName = userName.toLowerCase();
        answer = answer.toLowerCase();
      }
      if (userName === answer) {
        console.log(`4—ë—Ç–∫–æ!${EOL}${fingerUp.repeat(20)}`);
        count += 1;
      } else {
        console.log(
          `–º–¥–∞–∞–∞–∞–∞–∞–∞, –≤–∞—â–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ ${
            this.model.readAnswers()[i + 1]
          }${EOL}${fingerDown.repeat(20)}`
        );
      }
      if (i === this.model.readAsk().length - 1) {
        if (count >= 4) {
          console.log(
            `${EOL}–í—ã –Ω–∞–±—Ä–∞–ª–∏ ${count} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤! –û–±–æ—Å—Å–∞—Ç—å—Å—è.`
          );
          console.log('–í–æ—Ç —ç—Ç–æ —Ç—ã –≤—É–Ω–¥–µ—Ä–∫–∏–Ω–¥–µ—Ä!');
        } else {
          console.log(
            `${EOL}–í—ã –Ω–∞–±—Ä–∞–ª–∏ ${count} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤! –û–±–æ—Å—Å–∞—Ç—å—Å—è.`
          );
          console.log(
            '–ú–¥–∞, –±—Ä–∞—Ç–∏—à–∫–∞, –∫–≤–∏–∑—ã –Ω–µ —Ç–≤–æ—ë. –ù–∞–¥–µ—é—Å—å, –∫–æ–¥ –ø–∏—à–µ—à—å —Ç—ã –ª—É—á—à–µ :)'
          );
        }
      }
    }
  }
}

module.exports = View;
